include_guard()

function (_dp_cmake_compute_has_multiple_auto_folder_targets_rec dir currentAutoFolderTargetCount autoFolderTargetCountOutVar outVar)
    get_property(targets DIRECTORY ${dir} PROPERTY BUILDSYSTEM_TARGETS)
    
    foreach (target ${targets})
        get_target_property(autoFolderProperty ${target} DP_CMAKE_AUTO_FOLDER)
        if (autoFolderProperty)
            math(EXPR currentAutoFolderTargetCount "${currentAutoFolderTargetCount} + 1")    
            
            if (currentAutoFolderTargetCount GREATER 1)
                set(${autoFolderTargetCountOutVar} ${currentAutoFolderTargetCount} PARENT_SCOPE)
                set(${outVar} True PARENT_SCOPE)
                return()
            endif ()
        endif ()
    endforeach ()
    
    get_property(subDirs DIRECTORY ${dir} PROPERTY SUBDIRECTORIES)
    
    foreach (subDir ${subDirs})
        _dp_cmake_compute_has_multiple_auto_folder_targets_rec(${subDir} ${currentAutoFolderTargetCount} subDirAutoFolderTargetCount subDirResult)
        
        if (subDirResult)
            set(${autoFolderTargetCountOutVar} ${subDirAutoFolderTargetCount} PARENT_SCOPE)
            set(${outVar} True PARENT_SCOPE)
            return()
        endif ()
        
        set(currentAutoFolderTargetCount ${subDirAutoFolderTargetCount})
    endforeach ()

    set(${autoFolderTargetCountOutVar} ${currentAutoFolderTargetCount} PARENT_SCOPE)
    set(${outVar} False PARENT_SCOPE)
endfunction ()

function (_dp_cmake_compute_has_multiple_auto_folder_targets dir outVar)
    _dp_cmake_compute_has_multiple_auto_folder_targets_rec(${dir} 0 autoFolderTargetCountDummyVar hasMultipleTargets)
    set(${outVar} ${hasMultipleTargets} PARENT_SCOPE)
endfunction ()

function (_dp_cmake_final_func_auto_folder_builder_rec currentDir lastAutoFolderUpdateDir currentAutoFolder)
    get_directory_property(dependencyDir DIRECTORY ${currentDir} DP_CMAKE_DEPENDENCY_DIR)
    if (${dependencyDir})
        set(dependenciesDirName "dependencies")
        if (currentAutoFolder STREQUAL "")
            set(currentAutoFolder ${dependenciesDirName})
        else ()
            cmake_path(APPEND currentAutoFolder ${dependenciesDirName})
        endif ()
    endif ()
    
    get_directory_property(projectSourceDir DIRECTORY ${currentDir} DP_CMAKE_PROJECT_SOURCE_DIR)  
    if (projectSourceDir)
        if (${currentDir} STREQUAL ${projectSourceDir})
            if (NOT ${projectSourceDir} STREQUAL ${CMAKE_SOURCE_DIR})
                _dp_cmake_compute_has_multiple_auto_folder_targets(${currentDir} hasMultipleTargets)
                if (hasMultipleTargets)
                    get_directory_property(projectName DIRECTORY ${currentDir} DP_CMAKE_PROJECT_NAME)
                    if (currentAutoFolder STREQUAL "")
                        set(currentAutoFolder ${projectName})
                    else ()
                        cmake_path(APPEND currentAutoFolder ${projectName})
                    endif ()
                endif ()
            endif ()
        endif ()
    
        set(currentRelativeDirFromProject ${currentDir})
        cmake_path(RELATIVE_PATH currentRelativeDirFromProject BASE_DIRECTORY ${projectSourceDir})
        if (currentRelativeDirFromProject STREQUAL ".")
            set(currentRelativeDirFromProject "")
        endif ()
    else ()
        set(currentRelativeDirFromProject "")
    endif ()
     
    if (currentAutoFolder STREQUAL "" AND currentRelativeDirFromProject STREQUAL "")
        set(autoFolder "")
    elseif (currentAutoFolder STREQUAL "")
        set(autoFolder ${currentRelativeDirFromProject})
    elseif (currentRelativeDirFromProject STREQUAL "")
        set(autoFolder ${currentAutoFolder})
    else ()
        set(autoFolder ${currentAutoFolder})
        cmake_path(APPEND autoFolder ${currentRelativeDirFromProject})
    endif ()
    
    if (NOT autoFolder STREQUAL "")
        get_property(targets DIRECTORY ${currentDir} PROPERTY BUILDSYSTEM_TARGETS)
        foreach (target ${targets})
            get_target_property(autoFolderProperty ${target} DP_CMAKE_AUTO_FOLDER)
            if (autoFolderProperty)                        
               set_target_properties(${target} PROPERTIES FOLDER ${autoFolder})
            endif ()
        endforeach ()
    endif ()
        
    get_property(subDirs DIRECTORY ${currentDir} PROPERTY SUBDIRECTORIES)
    foreach (subDir ${subDirs})
        _dp_cmake_final_func_auto_folder_builder_rec(${subDir} ${lastAutoFolderUpdateDir} "${autoFolder}")
    endforeach ()
endfunction ()

function (_dp_cmake_final_func)
    _dp_cmake_final_func_auto_folder_builder_rec(${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR} "")
endfunction ()

function (_dp_cmake_ensure_final_func)
    get_property(dpCMakeFinalFuncDefined GLOBAL PROPERTY DP_CMAKE_FINAL_FUNC DEFINED)
    if (NOT dpCMakeFinalFuncDefined)
        define_property(GLOBAL PROPERTY DP_CMAKE_FINAL_FUNC)
        cmake_language(DEFER DIRECTORY ${CMAKE_SOURCE_DIR} CALL _dp_cmake_final_func())
    endif ()
endfunction ()

function (_dp_cmake_ensure_auto_folder_properties)
    define_property(DIRECTORY PROPERTY DP_CMAKE_PROJECT_NAME)
    define_property(DIRECTORY PROPERTY DP_CMAKE_PROJECT_SOURCE_DIR)
    define_property(DIRECTORY PROPERTY DP_CMAKE_DEPENDENCY_DIR)
    define_property(TARGET PROPERTY DP_CMAKE_AUTO_FOLDER)
endfunction ()

function (_dp_cmake_manage_dependency_dir dir)
    _dp_cmake_ensure_auto_folder_properties()
    set_property(DIRECTORY ${dir} PROPERTY DP_CMAKE_DEPENDENCY_DIR ON)
    
    dp_get_targets_list(newTargets DIRECTORY ${dir} RECURSE)

    foreach (newTarget ${newTargets})
        get_target_property(newIsImported ${newTarget} IMPORTED)

        if (NOT newIsImported)                   
            set_target_properties(${newTarget} PROPERTIES DP_CMAKE_AUTO_FOLDER ON)
        endif ()
    endforeach ()
    
    _dp_cmake_ensure_final_func()
endfunction ()
