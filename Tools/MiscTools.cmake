include_guard()

function (dp_assert)
    if (NOT ${ARGN})
        string(REPLACE ";" " " formattedCondition "${ARGN}")
        message(FATAL_ERROR "Assertion failed: '${formattedCondition}'")
    endif ()
endfunction ()

function (dp_patch_file filePath)
    if (NOT EXISTS ${filePath})
        file(TOUCH ${filePath})
    endif ()

    file(READ ${filePath} fileContent)

    list(LENGTH ARGN argumentCount)
    set(currentIndex 0)
    while (${currentIndex} LESS ${argumentCount})
        list(GET ARGN ${currentIndex} patchCommand)

        if (patchCommand STREQUAL "REPLACE")
            set(neededArgumentCount 2)
        elseif (patchCommand STREQUAL "REMOVE")
            set(neededArgumentCount 1)
        elseif (patchCommand STREQUAL "ADD_BEFORE")
            set(neededArgumentCount 2)
        elseif (patchCommand STREQUAL "ADD_AFTER")
            set(neededArgumentCount 2)
        elseif (patchCommand STREQUAL "ADD_LINE_BEFORE")
            set(neededArgumentCount 2)
        elseif (patchCommand STREQUAL "ADD_LINE_AFTER")
            set(neededArgumentCount 2)
        elseif (patchCommand STREQUAL "APPEND_LINE")
            set(neededArgumentCount 1)
        else ()
            set(neededArgumentCount -1)
        endif ()

        MATH(EXPR firstArgIndex "${currentIndex}+1")
        MATH(EXPR secondArgIndex "${currentIndex}+2")
        MATH(EXPR lastArgIndex "${currentIndex}+${neededArgumentCount}")
        
        set(uniqueDpCMakeMarker "__UNIQUE_DP_CMAKE_MARKER__")

        if (${neededArgumentCount} LESS 0)
            message(SEND_ERROR "dpCMake: Bad patch command '${patchCommand}' given to dp_patch_file")
        elseif (${lastArgIndex} GREATER_EQUAL ${argumentCount})
            message(AUTHOR_WARNING "dpCMake: Bad number of arguments given to dp_patch_file for patch command '${patchCommand}'")
        elseif (patchCommand STREQUAL "REPLACE")
            list(GET ARGN ${firstArgIndex} toReplace)
            list(GET ARGN ${secondArgIndex} replacing)
            string(REPLACE ${toReplace} ${replacing} fileContent "${fileContent}")
        elseif (patchCommand STREQUAL "REMOVE")
            list(GET ARGN ${firstArgIndex} toRemove)
            string(REPLACE ${toRemove} "" fileContent "${fileContent}")
        elseif (patchCommand STREQUAL "ADD_BEFORE")
            list(GET ARGN ${firstArgIndex} beforeText)
            list(GET ARGN ${secondArgIndex} toAdd)
            string(REPLACE ${beforeText} "${toAdd}${beforeText}" fileContent "${fileContent}")         
        elseif (patchCommand STREQUAL "ADD_AFTER")
            list(GET ARGN ${firstArgIndex} afterText)
            list(GET ARGN ${secondArgIndex} toAdd)
            string(REPLACE ${afterText} "${afterText}${toAdd}" fileContent "${fileContent}")
        elseif (patchCommand STREQUAL "ADD_LINE_BEFORE")
            list(GET ARGN ${firstArgIndex} beforeText)
            list(GET ARGN ${secondArgIndex} lineToAdd)
            string(REPLACE "${beforeText}" "${uniqueDpCMakeMarker}${beforeText}" fileContent "${fileContent}")
            string(REPLACE "\n${uniqueDpCMakeMarker}" "\n${lineToAdd}\n" fileContent "${fileContent}")
            string(REPLACE "${uniqueDpCMakeMarker}" "\n${lineToAdd}\n" fileContent "${fileContent}")
        elseif (patchCommand STREQUAL "ADD_LINE_AFTER")
            list(GET ARGN ${firstArgIndex} afterText)
            list(GET ARGN ${secondArgIndex} lineToAdd)
            string(REPLACE "${afterText}" "${afterText}${uniqueDpCMakeMarker}" fileContent "${fileContent}")
            string(REPLACE "${uniqueDpCMakeMarker}\n" "\n${lineToAdd}\n" fileContent "${fileContent}")
            string(REPLACE "${uniqueDpCMakeMarker}" "\n${lineToAdd}\n" fileContent "${fileContent}")
        elseif (patchCommand STREQUAL "APPEND_LINE")
            list(GET ARGN ${firstArgIndex} lineToAppend)
            if (fileContent STREQUAL "")
                set(fileContent "${lineToAppend}\n")
            elseif (fileContent MATCHES "\n$")
                string(APPEND fileContent "${lineToAppend}\n")
            else ()
                string(APPEND fileContent "\n${lineToAppend}\n")
            endif ()
        endif ()
        
        MATH(EXPR currentIndex "${lastArgIndex}+1")
    endwhile ()

    file(WRITE ${filePath} "${fileContent}")
endfunction ()

function (dp_get_targets_list outTargetsListVar)
    set(options RECURSE)
    set(oneValueArgs DIRECTORY)
    set(multiValueArgs)
    cmake_parse_arguments(DP_GET_TARGETS_LIST "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  
    if (DEFINED DP_GET_TARGETS_LIST_DIRECTORY)
        set(dir ${DP_GET_TARGETS_LIST_DIRECTORY})
    else ()
        set(dir ${CMAKE_CURRENT_SOURCE_DIR})
    endif ()

    get_property(targets DIRECTORY ${dir} PROPERTY BUILDSYSTEM_TARGETS)

    if (DP_GET_TARGETS_LIST_RECURSE)
        get_property(subDirs DIRECTORY ${dir} PROPERTY SUBDIRECTORIES)

        foreach (subDir ${subDirs})
            dp_get_targets_list(subDirTargets DIRECTORY ${subDir} RECURSE)
            list(APPEND targets ${subDirTargets})
        endforeach ()

        list(REMOVE_DUPLICATES targets)
    endif ()

    set(${outTargetsListVar} ${targets} PARENT_SCOPE)
endfunction ()
